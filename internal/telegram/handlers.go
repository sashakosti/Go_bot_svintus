package telegram

import (
	"errors"
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sashakosti/Go_Bot_Svintus/internal/service"
	"github.com/sashakosti/Go_Bot_Svintus/internal/storage"
)

// MessageSender –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
type MessageSender interface {
	Send(c tgbotapi.Chattable) (tgbotapi.Message, error)
	Request(c tgbotapi.Chattable) (*tgbotapi.APIResponse, error)
}

type Handler struct {
	Bot     MessageSender
	Service service.GameServiceInterface
}

func NewHandler(bot MessageSender, service service.GameServiceInterface) *Handler {
	return &Handler{
		Bot:     bot,
		Service: service,
	}
}

// HandleJoin - /join
func (h *Handler) HandleJoin(chatID int64, user *tgbotapi.User) {
	err := h.Service.RegisterPlayer(user.ID, user.UserName, user.FirstName)
	if err != nil {
		sendMessage(h.Bot, tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üòÖ"))
		return
	}
	sendMessage(h.Bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("%s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!", user.FirstName)))
}

// HandleRecordStart - –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
func (h *Handler) HandleRecordStart(msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	allPlayers, err := h.Service.GetAllPlayers()
	if err != nil {
		sendMessage(h.Bot, tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ üòÖ"))
		return
	}

	if len(allPlayers) == 0 {
		sendMessage(h.Bot, tgbotapi.NewMessage(chatID, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join."))
		return
	}

	keyboard := h.buildPlayersKeyboard(allPlayers, []storage.Player{})
	reply := tgbotapi.NewMessage(chatID, "–ö—Ç–æ –∑–∞–Ω—è–ª 1-–µ –º–µ—Å—Ç–æ?")
	reply.ReplyMarkup = keyboard

	sentMsg, err := h.Bot.Send(reply)
	if err != nil {
		log.Printf("Failed to send record start message: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err = h.Service.StartRecordingSession(chatID, int64(sentMsg.MessageID))
	if err != nil {
		log.Printf("Failed to start recording session: %v", err)
		sendMessage(h.Bot, tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
	}
}

// HandleRecordCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏–≥—Ä—ã
func (h *Handler) HandleRecordCallback(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	if _, err := h.Bot.Request(tgbotapi.NewCallback(callback.ID, "")); err != nil {
		log.Printf("Failed to send callback request: %v", err)
	}

	session, err := h.Service.GetRecordingSession(chatID)
	if err != nil {
		if errors.Is(err, service.ErrSessionNotFound) {
			sendMessage(h.Bot, tgbotapi.NewMessage(chatID, "–°–µ—Å—Å–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /record."))
		} else {
			log.Printf("Error getting session: %v", err)
		}
		return
	}

	switch data {
	case "record_cancel":
		h.handleRecordingCancel(callback)
	case "record_finish":
		h.handleRecordingFinish(callback)
	default:
		h.handlePlayerSelection(callback, session)
	}
}

// handleRecordingCancel –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏.
func (h *Handler) handleRecordingCancel(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	if err := h.Service.CancelRecording(chatID); err != nil {
		log.Printf("Failed to cancel recording: %v", err)
	}
	editMsg := tgbotapi.NewEditMessageText(chatID, callback.Message.MessageID, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
	sendMessage(h.Bot, editMsg)
}

// handleRecordingFinish –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
func (h *Handler) handleRecordingFinish(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	winners, err := h.Service.FinishRecording(chatID)
	if err != nil {
		sendMessage(h.Bot, tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
		log.Printf("RecordGame error: %v", err)
		return
	}

	if len(winners) == 0 {
		sendMessage(h.Bot, tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞."))
		return
	}

	resultText := "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
	for i, p := range winners {
		resultText += fmt.Sprintf("%d. %s\n", i+1, p.DisplayName)
	}
	editMsg := tgbotapi.NewEditMessageText(chatID, callback.Message.MessageID, resultText)
	sendMessage(h.Bot, editMsg)
}

// handlePlayerSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞.
func (h *Handler) handlePlayerSelection(callback *tgbotapi.CallbackQuery, session *storage.RecordingSession) {
	chatID := callback.Message.Chat.ID
	var selectedPlayerID int64
	if _, err := fmt.Sscanf(callback.Data, "record_select_%d", &selectedPlayerID); err != nil {
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
	sessionPlayers, err := h.Service.AddPlayerToRecording(chatID, selectedPlayerID)
	if err != nil {
		log.Printf("Failed to add player to recording: %v", err)
		sendMessage(h.Bot, tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞."))
		return
	}

	allPlayers, err := h.Service.GetAllPlayers()
	if err != nil {
		sendMessage(h.Bot, tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤. üò•"))
		return
	}
	newKeyboard := h.buildPlayersKeyboard(allPlayers, sessionPlayers)

	winnerText := "–ü–æ—Ä—è–¥–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n"
	for i, p := range sessionPlayers {
		winnerText += fmt.Sprintf("%d. %s\n", i+1, p.DisplayName)
	}
	winnerText += fmt.Sprintf("\n–ö—Ç–æ –∑–∞–Ω—è–ª %d-–µ –º–µ—Å—Ç–æ?", len(sessionPlayers)+1)

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, int(session.MessageID), winnerText, newKeyboard)
	sendMessage(h.Bot, editMsg)
}

// buildPlayersKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–≥—Ä–æ–∫–∞–º–∏, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.
func (h *Handler) buildPlayersKeyboard(all, selected []storage.Player) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	selectedIDs := make(map[int64]bool)
	for _, p := range selected {
		selectedIDs[p.TGID] = true
	}

	for _, p := range all {
		if !selectedIDs[p.TGID] {
			button := tgbotapi.NewInlineKeyboardButtonData(p.DisplayName, fmt.Sprintf("record_select_%d", p.TGID))
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
		}
	}

	var controlButtons []tgbotapi.InlineKeyboardButton
	if len(selected) > 0 {
		finishButton := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", "record_finish")
		controlButtons = append(controlButtons, finishButton)
	}
	cancelButton := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "record_cancel")
	controlButtons = append(controlButtons, cancelButton)

	rows = append(rows, controlButtons)

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// HandleLeaderboard - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /leaderboard
func (h *Handler) HandleLeaderboard(chatID int64) {
	leaderboard, err := h.Service.GetLeaderboard()
	if err != nil {
		sendMessage(h.Bot, tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ üòÖ"))
		return
	}

	text := "üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤:\n"
	for i, p := range leaderboard {
		word := Pluralize(p.Score, [3]string{"–æ—á–∫–æ", "–æ—á–∫–∞", "–æ—á–∫–æ–≤"})
		text += fmt.Sprintf("%d. %s ‚Äî %d %s\n", i+1, p.DisplayName, p.Score, word)
	}

	sendMessage(h.Bot, tgbotapi.NewMessage(chatID, text))
}

// HandleMyScore - —É–∑–Ω–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—á–∫–∏
func (h *Handler) HandleMyScore(chatID int64, user *tgbotapi.User) {
	score, err := h.Service.GetPlayerScore(user.ID)
	if err != nil {
		sendMessage(h.Bot, tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏ üòÖ"))
		log.Printf("[Score] failed for %s: %v", user.UserName, err)
		return
	}
	sendMessage(h.Bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("%s, —É —Ç–µ–±—è %d –æ—á–∫–æ–≤", user.FirstName, score)))
	log.Printf("[Score] %s has %d points", user.UserName, score)
}

var commandsKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "join"),
		tgbotapi.NewInlineKeyboardButtonData("–ú–æ–∏ –æ—á–∫–∏", "myscore"),
		tgbotapi.NewInlineKeyboardButtonData("–†–µ–π—Ç–∏–Ω–≥", "leaderboard"),
	),
)

// HandleHelp - /help
func (h *Handler) HandleHelp(msg *tgbotapi.Message) {
	text := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Svintus Bot! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" +
		"/join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n" +
		"/leaderboard - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤\n" +
		"/myscore - —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –æ—á–∫–∏\n" +
		"/record - –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã \n" +
		"/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"

	reply := tgbotapi.NewMessage(msg.Chat.ID, text)
	reply.ReplyMarkup = commandsKeyboard
	sendMessage(h.Bot, reply)
}
